#!/usr/bin/env python3

import gettext
import locale
import os
import psutil
import subprocess
import sys
import time

from ola.ClientWrapper import ClientWrapper
from ola import OlaClient
from gi.repository import Gio

# Make sure we'll find the olc modules, even in JHBuild
sys.path.insert(1, '@pythondir@')

from olc.application import Application  # noqa: E402

localedir = '@localedir@'
pkgdatadir = '@pkgdatadir@'


def is_running(name):
    '''Check if there is any running process that contains the given name processName.

    Args:
        name (str): process name

    Returns:
        bool: True if running, False otherwise
    '''
    # Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process names contains the given name string
            if name.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False


if __name__ == "__main__":

    if not is_running('olad'):
        # Launch olad if not running
        olad_pid = subprocess.Popen('olad')
        # Wait olad starting
        timeout = 15
        timer = 0
        wrapper = None
        while not wrapper:
            try:
                wrapper = ClientWrapper()
            except (OlaClient.OLADNotRunningException, ConnectionError):
                time.sleep(0.1)
                timer += 0.1
                if timer >= timeout:
                    print("Can't start olad")
                    break
    else:
        olad_pid = None

    locale.bindtextdomain('olc', localedir)
    locale.textdomain('olc')
    gettext.bindtextdomain('olc', localedir)
    gettext.textdomain('olc')

    resource = Gio.resource_load(os.path.join(pkgdatadir, 'olc.gresource'))
    Gio.Resource._register(resource)

    app = Application()

    exit_status = app.run(sys.argv)

    if olad_pid:
        # Stop olad if we launched it
        olad_pid.terminate()

    sys.exit(exit_status)
