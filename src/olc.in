#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Open Lighting Console
# Copyright (c) 2015-2022 Mika Cousin <mika.cousin@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import gettext
import locale
import os
import subprocess
import sys
import time
import psutil

from gi.repository import Gio

# Make sure we'll find all modules
sys.path.insert(1, "@pythondir@")

from ola.ClientWrapper import ClientWrapper  # noqa: 402
from ola import OlaClient  # noqa: E402

from olc.application import Application  # noqa: E402

LOCALEDIR = "@localedir@"
PKGDATADIR = "@pkgdatadir@"


def is_running(name):
    """Check if there is any running process that contains the given name processName.

    Args:
        name (str): process name

    Returns:
        bool: True if running, False otherwise
    """
    # Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process names contains the given name string
            if name.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False


if __name__ == "__main__":

    if not is_running("olad"):
        # Launch olad if not running
        olad_pid = subprocess.Popen("olad")
        # Wait olad starting
        timeout = 15
        timer = 0
        wrapper = None
        while not wrapper:
            try:
                wrapper = ClientWrapper()
            except (OlaClient.OLADNotRunningException, ConnectionError):
                time.sleep(0.1)
                timer += 0.1
                if timer >= timeout:
                    print("Can't start olad")
                    break
    else:
        olad_pid = None

    locale.bindtextdomain("olc", LOCALEDIR)
    locale.textdomain("olc")
    gettext.bindtextdomain("olc", LOCALEDIR)
    gettext.textdomain("olc")

    resource = Gio.resource_load(os.path.join(PKGDATADIR, "olc.gresource"))
    Gio.Resource._register(resource)

    app = Application()

    exit_status = app.run(sys.argv)

    if olad_pid:
        # Stop olad if we launched it
        olad_pid.terminate()

    sys.exit(exit_status)
